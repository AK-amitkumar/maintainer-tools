#!/usr/bin/python

import subprocess
import itertools
import operator
import argparse

from oca_projects import OCA_PROJECTS

def get_contributions(projects, since, merges):
    cmd =['git', 'log', '--pretty=format:%ai %ae']
    if since is not None:
        cmd += ['--since', since]
    if merges:
        cmd += ['--merges']
    if isinstance(projects, (str, unicode)):
        projects =  [projects]
    for project in projects:
        contributions = {}
        for repo in OCA_PROJECTS[project]:
            pipe = subprocess.Popen(cmd, stdout=subprocess.PIPE, cwd=repo)
            out, error = pipe.communicate()
            for line in out.splitlines():
                try:
                    date, hour, tz, author = line.split()
                except ValueError:
                    print line
                    continue
                contributions.setdefault(author, []).append(date)
        yield project, contributions

def top_contributors(projects, since=None, merges=False, top=5):
    for project, contributions in get_contributions(projects, since, merges):
        contributors = sorted(contributions.iteritems(),
                              key=lambda x: len(x[1]),
                              reverse=True)
        for author, contribs in contributors[:top]:
            yield project, author, len(contribs), min(contribs), max(contribs)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--since',
                        metavar='YYYY-MM-DD',
                        default=None,
                        help='only consider contributions since YYYY-MM-DD')
    parser.add_argument('--merges',
                        default=False,
                        action='store_true',
                        help='only consider merges')
    project_names = sorted(OCA_PROJECTS)
    args = parser.parse_args()
    grouped = itertools.groupby(top_contributors(project_names,
                                                 since=args.since,
                                                 merges=args.merges),
                                operator.itemgetter(0))
    for project, contribs  in grouped:
        print project
        for _p, author, nb_contrib, earliest, latest in contribs:
            info = {'project': project,
                    'author': author,
                    'nb_contrib': nb_contrib,
                    'earliest': earliest,
                    'latest': latest
                     }
            print '     %(author)-35s:\t%(nb_contrib) 4d %(earliest)s %(latest)s' % info
        print

if __name__ == "__main__":
    main()

